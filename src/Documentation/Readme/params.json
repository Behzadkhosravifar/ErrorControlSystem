{"name":"ErrorControlSystem","tagline":"ErrorControlSystem is a .NET library created to automate handling .NET Windows-Base application exceptions and raise that to a sql server. This exception handler have some features as screen capturing, fetch server date time in exception occurrence time and etc.","body":"# [Error Control System](https://github.com/Behzadkhosravifar/ErrorControlSystem) #\r\n---------------------\r\n[![Build status](https://ci.appveyor.com/api/projects/status/lnjusej10c0451xw?svg=true)](https://ci.appveyor.com/project/Behzadkhosravifar/errorcontrolsystem)\r\n[![Nuget count](http://img.shields.io/nuget/v/errorcontrolsystem.svg)](https://www.nuget.org/packages/errorcontrolsystem/)\r\n[![Nuget downloads](http://img.shields.io/nuget/dt/errorcontrolsystem.svg)](https://www.nuget.org/packages/errorcontrolsystem/)\r\n[![Issues open](http://img.shields.io/github/issues-raw/behzadkhosravifar/ErrorControlSystem.svg)](https://huboard.com/behzadkhosravifar/ErrorControlSystem)\r\n[![Source Browser](https://img.shields.io/badge/Browse-Source-green.svg)](http://sourcebrowser.io/Browse/Behzadkhosravifar/ErrorControlSystem)\r\n\r\n[![Error Control System.png](https://raw.githubusercontent.com/Behzadkhosravifar/ErrorControlSystem/master/Images/Error%20Control%20System.png)](https://www.nuget.org/packages/ErrorControlSystem)\r\n\r\n\r\n---------------------\r\n### What Is This?\r\n\r\nThis is a C#.Net project's for manage __Exceptions__ of your .Net applications by handling and \r\nlogging that. This is a .dll modules to provide error handling worker on your app background's.\r\nThe modules strive to be simple, well documented and\r\nmodification friendly, in order to help developers quickly learn their inner\r\nworkings.\r\n\r\nNOTE: \r\n>     This program is only for exception handling of \r\n>     Windows-based applications (WinForms, WPF, Console)\r\n>     that are written by .NET languages such as C#, VB.NET, Visual F#\r\n\r\n\r\n--------------------------------\r\n### How To Use The Examples\r\n\r\nTo interact with this project, at first find main class of your project to \r\nadd this module. Then, at the beginning of the instructions before any other \r\nuser codes, enter the following command to invoke and run the module.\r\n\r\nThis is initialize codes of the module in `C# language` windows applications:\r\n \r\n```C#\r\n\r\nusing System;\r\nusing System.Windows.Forms;\r\nusing ErrorControlSystem;\r\nusing ErrorControlSystem.Shared;\r\n\r\nnamespace TestApplication\r\n{\r\n    static class Program\r\n    {\r\n        [STAThread]\r\n        private static void Main()\r\n        {\r\n\t\t\t//\r\n            // ------------------ Initial Error Control System ----------------------------\r\n            //\r\n            ExceptionHandler.Engine.Start(\"Server\", \"Database\", \"Username\", \"Password\"\r\n                ErrorHandlingOptions.Default &\r\n                   ~ErrorHandlingOptions.ResizeSnapshots &\r\n                   ~ErrorHandlingOptions.DisplayUnhandledExceptions);\r\n            \r\n            // Or Set Option this way:\r\n            ErrorHandlingOption.ResizeSnapshots = false;\r\n            ErrorHandlingOption.DisplayUnhandledExceptions = false;\r\n\r\n            //\r\n            // Some of the optional configuration items.\r\n            //\r\n            // Except 'NotImplementedException' from raise log\r\n            ExceptionHandler.Filter.ExemptedExceptionTypes.Add(typeof(NotImplementedException));\r\n\r\n            // Filter 'Exception' type from Snapshot capturing \r\n            ExceptionHandler.Filter.NonSnapshotExceptionTypes.Add(typeof(FormatException));\r\n\r\n            // Add extra data for labeling exceptions\r\n            ExceptionHandler.Filter.AttachExtraData.Add(\"WinForms\", \"beta version\");\r\n\r\n            // Filter a method of a specific class in my assembly \r\n\t\t\t// from raise unhanded exceptions log\r\n            ExceptionHandler.Filter.ExemptedCodeScopes.Add(\r\n                new CodeScope(\"Assembly\", \"Namespace\", \"Class\", \"Method\"));\r\n\r\n            // Do not raise any exception in other code places.\r\n            ExceptionHandler.Filter.JustRaiseErrorCodeScopes.Add(\r\n                new CodeScope(\"Assembly\", \"Namespace\", \"Class\", \"Method\"));\r\n\t\t\t//\r\n            // Show unhandled exception message customized mode. \r\n            ExceptionHandler.OnShowUnhandledError += AlertUnhandledErrors;\r\n            //\r\n            // ----------------------------------------------------------------------------\r\n            //\r\n\r\n\t\t\tApplication.EnableVisualStyles();\r\n            Application.SetCompatibleTextRenderingDefault(false);\r\n            Application.Run(new FormTest());\r\n        }\r\n\r\n\t\t/// <summary>\r\n        /// Show unhandled exception message customized mode.\r\n        /// </summary>\r\n        /// <param name=\"sender\">Raw exception object</param>\r\n        /// <param name=\"e\">Compiled error object</param>\r\n        public static void AlertUnhandledErrors(object sender, UnhandledErrorEventArgs e)\r\n        {\r\n            MessageBox.Show(e.ErrorObject.Message);\r\n        }\r\n    }\r\n}\r\n```\r\n\r\nIn VB.NET applications, open the solution window and select `My Project` \r\nthen click on __Show All Files__ and go on this path:\r\n\r\n* My Project\r\n    * Application.myapp\r\n\t    * Application.Designer.vb  --> (open this file)\r\n\r\nAdd Startup events at this file, same below codes:\r\n\r\n```VB\r\n\r\nPartial Friend Class MyApplication\r\n        \r\n        <Global.System.Diagnostics.DebuggerStepThroughAttribute()>  _\r\n        Public Sub New()\r\n            MyBase.New(Global.Microsoft.VisualBasic.ApplicationServices.AuthenticationMode.Windows)\r\n            Me.IsSingleInstance = True\r\n            Me.EnableVisualStyles = True\r\n            Me.SaveMySettingsOnExit = True\r\n            Me.ShutDownStyle = Global.Microsoft.VisualBasic.ApplicationServices.ShutdownMode.AfterMainFormCloses\r\n        End Sub\r\n\r\n        <Global.System.Diagnostics.DebuggerStepThroughAttribute()> _\r\n        Protected Overrides Sub OnCreateMainForm()\r\n            Me.MainForm = Global.ErrorControlSystem.Examples.VisualBasicWinForms.Form1\r\n        End Sub\r\n\r\n\r\n        Private Sub MyApplication_Startup(sender As Object, e As ApplicationServices.StartupEventArgs) Handles Me.Startup\r\n            ' ------------------ Initial Error Control System --------------------------------\r\n            ExceptionHandler.Engine.Start(\"localhost\", \"UsersManagements\")\r\n            ' ---------------------------------------------------------------------------------\r\n        End Sub\r\n    End Class\r\n```\r\n\r\nOr create a Sub Main method like MainModule.vb, for this change must be to go on the Project Designer (go to Project \r\nProperties or double-click the My Project node in Solution Explorer) and then after shown properties form, uncheck \r\nthe `Enable Application Framework` option on the Application tab, and at last change the __Startup object__ to `Sub Main`.\r\n\r\n\r\n--------------------------------\r\n### Settings\r\n\r\nIn the initialize code snippet you've seen that, for the `ExceptionHandler.Engine` method should be an option. \r\nThis option is used to specify the error data, which includes the following values:\r\n\r\n* None\r\n* All\r\n* Default = All - (ExitApplicationImmediately, HandleProcessCorruptedStateExceptions)\r\n\r\n* DisplayUnhandledExceptions\r\n* ReportHandledExceptions\r\n* Snapshot\r\n* FetchServerDateTime\r\n* ResizeSnapshots\r\n* EnableNetworkSending\r\n* FilterExceptions\r\n* ExitApplicationImmediately\r\n* HandleProcessCorruptedStateExceptions\r\n* DisplayDeveloperUI\r\n\r\nFor example in above codes, this code means is:\r\n\r\n```C#\r\nExceptionHandler.Engine.Start(\"localhost\", \"UsersManagements\",\r\n                ErrorHandlingOptions.Default & ~ErrorHandlingOptions.ResizeSnapshots);\r\n```\r\nSelect all options by excepted `ResizeSnapshots`\r\n\r\nBy adding the our module starter code to the beginning of your program code, you can raise all exceptions history, including __Handled__ or __UnHandled__ exceptions on the your database.\r\n\r\nNote:\r\n>     In the new version 2.1.1.0 and later, the option set in from database at runtime, \r\n>     and not necessary to set that from initial  Start  method\r\n\r\n\r\n--------------------------\r\n### How To Install The Modules\r\n\r\n1. Install examples for developers (unpacking it to your disk, and go to\r\n\\ErrorControlSystem\\out\\ErrorControlSystem\\... directory if you're installing by hand, for example).\r\n\r\n Note:\r\n>      If there is not any file in the out folders, \r\n>      run the buildx86.bat (or buildx64 on 64bit Operation System) file \r\n>      to compile project and create executable files.\r\n>      Or \r\n>      please open project .sln file on Visual Studio 2013 \r\n>      and debug/release that to compile native files.\r\n\r\n\r\n2. In your project reference add this module dll file:  \r\n   References > Add Reference... > Browse to above path > Select ErrorControlSystem.dll\r\n\r\n3. Rebuild access permissions if you are prompted to.\r\n\r\nNow you can read the code and its comments and see the result, experiment with\r\nit, and hopefully quickly grasp how things work.\r\n\r\nIf you find a problem, incorrect comment, obsolete or improper code or such,\r\nplease search for an issue about it at [ECS Issue](https://github.com/Behzadkhosravifar/ErrorControlSystem/issues)\r\nIf there isn't already an issue for it, please create a new one.\r\n\r\n\r\n--------------------------\r\n### Creating SQL Server Database Manually\r\n\r\nThe `ErrorControlSystem` project used from __UsersManagements __ database. So that is necessary for run this application.\r\nFor Creating __UsersManagements__ database on your server or pc do below steps:\r\n\r\nNote:\r\n>     In the new version database and tables automatically created by ErrorControlSystem\r\n\r\n\r\nFirst open `SQL Server Management Studio` then connect to your Server instance.\r\nNext step's, Create New Database by name __UsersManagements__ or any name of your choice.\r\n\r\nOnly be carefully, in order to launch the program, enter the database name. For example: \r\n\r\n```C#\r\n\r\nExceptionHandler.Engine.Start(new Connection(\"Server\", \"Database\", \"User\", \"Pass\"));\r\n\r\n// or simpler mode:\r\nExceptionHandler.Engine.Start(\"Server\", \"Database\", \"User\", \"Pass\");\r\n\r\n```\r\n\r\nNow, we need to create two table by names __ErrorLog__ and __Snapshots__ to save exceptions by screen captures.\r\n\r\n__ErrorLog Table:__\r\n\r\n| Column Name      | Data Type           | \r\n|:---------------- |:------------------- |\r\n| ErrorId          |  `bigint`           |\r\n| DateTime\t\t   |  `datetime`         |\r\n| Host             |  `varchar(200)`     |\r\n| User             |  `varchar(200)`     |\r\n| IsHandled\t\t   |  `bit`              |\r\n| Type             |  `varchar(200)`     |\r\n| AppName\t\t   |  `varchar(200)`     |\r\n| Data             |  `xml`              |\r\n| CurrentCulture   |  `nvarchar(200)`    |\r\n| CLRVersion\t   |  `varchar(100)`     |\r\n| Message          |  `nvarchar(MAX)`    |\r\n| Source           |  `nvarchar(MAX)`    |\r\n| StackTrace       |  `nvarchar(MAX)`    |\r\n| ModuleName\t   |  `varchar(200)`     |\r\n| MemberType\t   |  `varchar(200)`     |\r\n| Method           |  `nvarchar(500)`    |\r\n| Processes        |  `varchar(MAX)`     |\r\n| ErrorDateTime\t   |  `datetime`         |\r\n| OS               |  `varchar(1000)`    |\r\n| IPv4Address\t   |  `varchar(50)`      |\r\n| MACAddress\t   |  `varchar(50)`      |\r\n| HResult          |  `int`              |\r\n| Line\t\t\t   |  `int`              |\r\n| Column\t\t   |  `int`              |\r\n| DuplicateNo\t   |  `int`              |\r\n\r\n__Snapshots Table:__\r\n\r\n| Column Name      | Data Type             |\r\n|:---------------- |:--------------------- |\r\n| ErrorLogId       |   `int`               |\r\n| ScreenCapture    |   `image`             |\r\n\r\nFor easy way please go ahead and try [Wiki](https://github.com/Behzadkhosravifar/ErrorControlSystem/wiki) to use SQL Queries.\r\nThere are __SQL Scripts__ to create tables and queries.\r\n\r\n\r\n\r\n--------------------------\r\n### Get it on NuGet       [![Nuget count](http://img.shields.io/nuget/v/errorcontrolsystem.svg)](https://www.nuget.org/packages/errorcontrolsystem/)\r\n\r\nYou may use ErrorControlSystem as a library that you install with [Nuget](https://www.nuget.org/packages/ErrorControlSystem/) into your project or as a Visual Studio extension. \r\nThe way you want to use it depends on the scenario you are working on. You most likely want the [Nuget](https://www.nuget.org/packages/ErrorControlSystem/) package.\r\n\r\nTo install Error Control System from [Nuget](https://www.nuget.org/packages/ErrorControlSystem/), \r\nrun the following command in the [Package Manager Console](http://docs.nuget.org/consume/package-manager-console)\r\n\r\n```powershell\r\nPM> Install-Package ErrorControlSystem\r\n```\r\n\r\n\r\n--------------------------\r\n### Contributing\r\n\r\nQuestions, comments, bug reports, and pull requests are all welcome.\r\nBug reports that include steps-to-reproduce (including code) are\r\npreferred. Even better, make them in the form of pull requests.\r\nBefore you start to work on an existing issue, check if it is not assigned\r\nto anyone yet, and if it is, talk to that person.\r\nAlso check the project [board](http://huboard.com/BehzadKhosravifar/ErrorControlSystem/board)\r\nand verify it is not being worked on (it will be tagged with the `Working` tag).\r\nIf it is not being worked on, before you start check if the item is `Ready`.\r\nIf the issue has the `Working` tag (working swimlane on Huboard) and has no Assignee\r\nthen it is not being worked on by somebody on the core team. Check the issue's\r\ndescription to find out who it is (if it is not there it has to be on the comments).\r\n\r\n\r\n--------------------------\r\n### Issues and task board       [![Issues open](http://img.shields.io/github/issues-raw/behzadkhosravifar/ErrorControlSystem.svg)](https://huboard.com/behzadkhosravifar/ErrorControlSystem)\r\n\r\n* The task board is at [Huboard](http://huboard.com/BehzadKhosravifar/ErrorControlSystem/).\r\n* You can also check the [Github backlog](https://github.com/BehzadKhosravifar/ErrorControlSystem/issues) directly.\r\n\r\n\r\n--------------------------\r\n### Contact\r\n\r\nPlease see our [contact page](https://www.nuget.org/packages/ErrorControlSystem/ContactOwners).\r\n\r\nEmail: [Behzad.Khosravifar@gmail.com](mailto:Behzad.Khosravifar@Gmail.com)\r\n\r\n--------------------------\r\n### LICENSE INFORMATION      [![OSI-Approved-License-100x137.png](http://opensource.org/trademarks/opensource/OSI-Approved-License-100x137.png)](http://opensource.org/licenses/GPL-3.0.html)\r\n\r\nThis software is open source, licensed under the GNU General Public License License, Version 3.0.\r\nSee [GPL-3.0](http://opensource.org/licenses/GPL-3.0.html) for details.\r\nThis Class Library creates a way of handling structured exception handling,\r\ninheriting from the Exception class gives us access to many method\r\nwe wouldn't otherwise have access to\r\n                  \r\nCopyright (C) 2014-2015 [Behzad Khosravifar](mailto:Behzad.Khosravifar@Gmail.com)\r\n\r\nThis program published by the Free Software Foundation,\r\neither version 1.0.1 of the License, or (at your option) any later version.\r\n\r\nThis program is distributed in the hope that it will be useful,\r\nbut WITHOUT ANY WARRANTY; without even the implied warranty of\r\nMERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}